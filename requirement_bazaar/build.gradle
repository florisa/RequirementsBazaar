/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */
buildscript {
    configurations["classpath"].resolutionStrategy.eachDependency {
        if (requested.group == "org.jooq") {
            useVersion("${project.property('jooq.version')}")
        }
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'idea'
    id "org.flywaydb.flyway" version "7.3.2"
    id "nu.studer.jooq" version "5.2"
}

group = 'de.rwth.dbis.acis.bazaar.service'
version = "${project.property('service.version')}"
archivesBaseName = group
mainClassName = "de.rwth.dbis.acis.bazaar.service.BazaarService"
sourceCompatibility = 14

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()

    // DBIS Archiva
    maven {
        url "https://archiva.dbis.rwth-aachen.de:9911/repository/internal/"
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // las2peer bundle which is not necessary in the runtime path
    // compileOnly will be moved into the lib dir afterwards
    compileOnly "i5:las2peer-bundle:${project.property('core.version')}"
    compileOnly "mysql:mysql-connector-java:${project.property('mysql.version')}"
    compileOnly 'org.hibernate:hibernate-validator:5.4.3.Final'
    compileOnly 'org.glassfish:jakarta.el:3.0.3'
    compileOnly 'javax.validation:validation-api:1.1.0.Final'

    // This is for the jooq generation only
    jooqGenerator "mysql:mysql-connector-java:${project.property('mysql.version')}"
    jooqGenerator "org.jooq:jooq-codegen:${project.property('jooq.version')}"

    implementation "org.flywaydb:flyway-core:7.3.2"
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.apache.commons:commons-pool2:2.9.0'
    implementation 'org.apache.commons:commons-dbcp2:2.8.0'
    implementation "org.jooq:jooq:${project.property('jooq.version')}"
    implementation "org.jooq:jooq-meta:${project.property('jooq.version')}"
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'org.jodd:jodd-vtor:5.3.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.9'
    implementation 'com.vdurmont:emoji-java:5.1.1'
}

configurations {
    // This ensures las2peer is available in the tests, but won't be bundled
    testCompile.extendsFrom compileOnly
}

jar {
    manifest {
        attributes "Main-Class": "de.rwth.dbis.acis.bazaar.service.BazaarService"
        attributes "Library-Version": "${project.property('core.version')}"
        attributes "Library-SymbolicName": "${project.property('service.name')}"
        // attribute "Import-Library": "${service.dependencies}"
    }

    from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } } {
        // Exclude signatures to be able to natively bundle mqtt
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

// These two tasks restore the build and runtime environment used
// in the ant environment
task copyJar(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into '../service'
}

// Maybe there is a more idiomatic way to separate out las2peer
task copyToLib(type: Copy) {
    from configurations.compileOnly
    into "../lib"
}

build.dependsOn copyJar
build.dependsOn copyToLib

// Flyway and jooq configuration for database management
jooq {
    version = "${project.property('jooq.version')}"
    configurations {
        main {  // name of the jOOQ configuration
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = "jdbc:mysql://${project.property('db.hostname')}:${project.property('db.port')}/${project.property('db.name')}"
                    user = "${project.property('db.user')}"
                    password = "${project.property('db.password')}"
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        inputSchema = "${project.property('db.name')}"
                        forcedTypes {
                            forcedType {
                                name = 'BOOLEAN'
                                includeExpression = ".*\\.admin"
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = false
                        fluentSetters = true
                    }
                    target {
                        packageName = 'de.rwth.dbis.acis.bazaar.dal.jooq'
                        directory = 'build/generated/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

flyway {
    url = "jdbc:mysql://${project.property('db.hostname')}:${project.property('db.port')}/${project.property('db.name')}"
    user = "${project.property('db.user')}"
    password = "${project.property('db.password')}"
    schemas = ['reqbaz']
    // Flyway now uses 'flyway_schema_history' to retain compatibility override this
    table = 'schema_version'
    locations = ["filesystem:$project.projectDir/src/main/resources/migrations"]
}

generateJooq.dependsOn flywayClean
generateJooq.dependsOn flywayMigrate
