<project name="RequirementsBazaar" default="all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:flyway="antlib:org.flywaydb.ant">

    <property name="core.version" value="1.0.0"/>
    <property name="mysql.version" value="8.0.22"/>

    <property file="etc/ant_configuration/user.properties"/>
    <property file="etc/ant_configuration/service.properties"/>

    <property file="etc/de.rwth.dbis.acis.bazaar.service.BazaarService.properties"/>

    <property name="startup" location="etc/startup"/>

    <property name="user_agent1.path" value="${startup}/agent-user-${las2peer_user.name}.xml"/>
    <property name="passphrases.path" value="${startup}/passphrases.txt"/>

    <property name="src.main" location="src/main"/>
    <property name="src.junit" location="src/test"/>

    <property name="tmp" location="tmp"/>
    <property name="log" location="log"/>
    <property name="service" location="service"/>

    <property name="tmp.classes" location="${tmp}/classes"/>
    <property name="tmp.bundle" location="${tmp}/bundle"/>
    <property name="tmp.junit" location="${tmp}/test"/>

    <property name="export" location="export"/>
    <property name="export.doc" location="${export}/doc"/>
    <property name="export.jars" location="${export}/jars"/>
    <property name="junit.report" location="${export}/test_reports"/>

    <property name="lib" location="lib"/>
    <property name="servicelib" location="servicebundle" />

    <path id="libraries">
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
            <exclude name="junit-*.jar"/>
        </fileset>
        <fileset dir="${servicelib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <property name="lib.junit" location="${lib}/junit-4.13.jar"/>


    <!-- Ivy Installation (Tool to fetch Libraries) -->
    <property name="ivy.install.version" value="2.5.0"/>
    <property name="ivy.jar.dir" value="${basedir}/etc/ivy"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <property name="ivy.settings.file" value="${ivy.jar.dir}/ivysettings.xml"/>
    <property name="ivy.dep.file" value="${ivy.jar.dir}/ivy.xml"/>
    <!-- Download Ivy from Web Site so that it can be used without any special Installation -->
    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <echo message="installing ivy..."/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true" skipexisting="true"/>
    </target>
    <!-- Try to load Ivy here from local Ivy directory -->
    <target name="install-ivy" depends="download-ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>


    <!-- Get Dependencies from our Maven Repository via Ivy -->
    <target name="get_deps" depends="install-ivy, init_deps" description="--> resolve dependencies">
        <ivy:settings>
            <credentials host="archiva.dbis.rwth-aachen.de:9911"  realm="acis-internal"/>
        </ivy:settings>
        <!-- <ivy:checkdepsupdate/> -->
        <ivy:retrieve type="jar, bundle" conf="platform" pattern="${lib}/[artifact]-[revision].[ext]"/>
        <ivy:retrieve type="jar, bundle" conf="bundle" pattern="${servicelib}/[artifact]-[revision].[ext]"/>
    </target>


    <!-- Initialization (Folder Creation)-->
    <target name="init_deps">
        <mkdir dir="${service}" />
        <mkdir dir="${lib}"/>
        <mkdir dir="${servicelib}" />
    </target>

    <target name="init_general">
        <tstamp/>
        <mkdir dir="${tmp}"/>
        <mkdir dir="${tmp}.bundle"/>
        <mkdir dir="${export}"/>
        <mkdir dir="${startup}"/>
        <mkdir dir="${log}"/>
    </target>

    <target name="init_compile" depends="init_general, get_deps">
        <mkdir dir="${tmp.classes}"/>
        <mkdir dir="${tmp.junit}"/>
    </target>

    <target name="init_jars" depends="init_general">
        <mkdir dir="${export.jars}"/>
    </target>

    <target name="init_doc" depends="init_general">
        <mkdir dir="${export.doc}"/>
    </target>


    <!-- Compilation -->
    <target name="compile_main" depends="init_compile">
        <javac srcdir="${src.main}"
               destdir="${tmp.classes}"
               classpathref="libraries"
               debug="on"
               encoding="UTF-8"
               includeantruntime="false"
        />
        <copy todir="${tmp.classes}">
            <fileset dir="${src.main}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>

    <target name="compile_junit" depends="init_compile">
        <javac srcdir="${src.junit}"
               destdir="${tmp.junit}"
               classpath="${tmp.classes}:${lib.junit}"
               classpathref="libraries"
               debug="on"
               encoding="UTF-8"
               includeantruntime="false"
        />
        <copy todir="${tmp.junit}">
            <fileset dir="${src.junit}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>

    <target name="compile_all" depends="compile_main, compile_junit"/>

    <!-- Generate start scripts -->
    <target name="startscripts" description="generate start scripts for Windows and Unix">
        <mkdir dir="${basedir}/bin"/>
        <echo file="${basedir}/bin/start_network.sh" append="false">#!/bin/bash

# this script is autogenerated by 'ant startscripts'
# it starts a LAS2peer node providing the service '${service.name}.${service.class}' of this project
# pls execute it from the root folder of your deployment, e. g. ./bin/start_network.sh

java -cp "lib/*" i5.las2peer.tools.L2pNodeLauncher -p 9011 uploadStartupDirectory --service-directory service startService\(\'${service.name}.${service.class}@${service.version}\',\'${service.passphrase}\'\) startWebConnector interactive
        </echo>
        <echo file="${basedir}/bin/start_network.bat" append="false">:: this script is autogenerated by 'ant
startscripts'
:: it starts a LAS2peer node providing the service '${service.name}.${service.class}' of this project
:: pls execute it from the bin folder of your deployment by double-clicking on it

%~d0
cd %~p0
cd ..
set BASE=%CD%
set CLASSPATH="%BASE%/lib/*;"

java -cp %CLASSPATH% i5.las2peer.tools.L2pNodeLauncher -p 9011 uploadStartupDirectory --service-directory service startService('${service.name}.${service.class}@${service.version}','${service.passphrase}') startWebConnector interactive

pause
        </echo>
    </target>

    <!-- Generate Jars -->
    <target name="jar" depends="compile_main" description="--> jar">
        <jar jarfile="${export.jars}/${service.name}-${service.version}.jar">
            <zipgroupfileset dir="${servicelib}" includes="**/*.jar" />
            <fileset dir="${tmp.classes}" includes="${service.path}/**"/>
            <fileset dir="src" includes="i18n/**"/>
            <manifest>
                <attribute name="Library-Version" value="${service.version}"/>
                <attribute name="Library-SymbolicName" value="${service.name}"/>
                <attribute name="Import-Library" value="${service.dependencies}"/>
            </manifest>
        </jar>
        <!-- Add the same Jar to the Service Directory !-->
        <jar jarfile="${service}/${service.name}-${service.version}.jar">
            <zipgroupfileset dir="${servicelib}" includes="**/*.jar" />
            <fileset dir="${tmp.classes}" includes="${service.path}/**" />
            <fileset dir="src" includes="i18n/**"/>
            <manifest>
                <attribute name="Library-Version" value="${service.version}" />
                <attribute name="Library-SymbolicName" value="${service.name}" />
                <attribute name="Import-Library" value="${service.dependencies}" />
            </manifest>
        </jar>
    </target>

    <!-- Generate Jars including all deps -->
    <target name="jar-big" depends="compile_main" description="--> build service jar including all deps">
        <jar jarfile="${service}/${service.name}-${service.version}.jar">
            <fileset dir="${tmp.classes}"/>
            <zipgroupfileset dir="${servicelib}" includes="**/*.jar" />
            <zipgroupfileset dir="${tmp.bundle}"/>
            <manifest>
                <attribute name="las2peer-service-name" value="${service.name}"/>
                <attribute name="las2peer-service-version" value="${service.version}"/>
            </manifest>
        </jar>
    </target>


    <!-- Generate Documentation -->
    <target name="javadoc" depends="init_doc">
        <javadoc destdir="${export.doc}"
                 author="true"
                 version="true"
                 use="true"
                 source="1.7"
                 windowtitle="Service Documentation"
                 failonerror="yes"
                 encoding="utf8"
                 classpath="${tmp.classes}"
                 classpathref="libraries"
        >
            <packageset dir="${src.main}" defaultexcludes="yes">
                <include name="de/rwth/dbis/acis/**"/>
            </packageset>
        </javadoc>
    </target>


    <!-- JUnit Testing -->
    <target name="junit" depends="junit_tests, junit_clean" description="--> execute all junit tests"/>

    <target name="init_junit" depends="init_general">
        <mkdir dir="${junit.report}"/>
    </target>

    <target name="junit_clean">
        <delete dir="${tmp.junit}"/>
    </target>

    <target name="junit_tests" depends="init_junit, compile_all">
        <junit fork="yes" haltonerror="yes" haltonfailure="yes" printsummary="yes">
            <classpath>
                <pathelement path="${tmp.classes}"/>
                <pathelement path="${tmp.junit}"/>
                <pathelement path="${lib.junit}"/>
                <path refid="libraries"/>
            </classpath>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${junit.report}">
                <fileset dir="${tmp.junit}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>


    <!-- XML Agent Generation (Builds Jar first so that Generator is available)-->
    <available file="${user_agent1.path}" property="user_agent_exists1"/>

    <target name="generate_user_agent1" depends="jar" unless="user_agent_exists1">
        <echo message="Writing User Agent xml to ${user_agent1.path}"/>
        <java classname="i5.las2peer.tools.UserAgentGenerator" classpathref="libraries"
              failonerror="true" fork="true" output="${user_agent1.path}">
            <arg line="'${las2peer_user.password}' '${las2peer_user.name}' '${las2peer_user.email}'"/>
        </java>
    </target>

    <target name="generate_agents" depends="generate_user_agent1" description="--> generate example user agents">
        <echo file="${passphrases.path}" append="false">agent-user-${las2peer_user.name}.xml;${las2peer_user.password}
        </echo>
    </target>

    <!-- General Cleanup -->
    <target name="clean" description="--> clean">
        <delete dir="${tmp}"/>
        <delete dir="${export}"/>
        <delete dir="${lib}"/>
        <delete dir="${service}"/>
        <delete dir="${servicelib}" />
    </target>

    <target name="clean_all" depends="clean" description="--> clean all data">
        <delete dir="${log}"/>
        <delete dir="node-storage"/>
    </target>

    <target name="all" depends="clean, get_deps, compile_main, jar, generate_agents, startscripts"/>

    <!-- Flyway database migration -->
    <target name="migrate-db">
        <taskdef uri="antlib:org.flywaydb.ant" resource="org/flywaydb/ant/antlib.xml">
            <classpath>
                <pathelement location="${lib}/flyway-core-4.2.0.jar"/>
                <pathelement location="${lib}/flyway-ant-4.2.0.jar"/>
                <pathelement location="${lib}//mysql-connector-java-${mysql.version}.jar"/>
            </classpath>
        </taskdef>

        <path id="flyway.classpath">
            <fileset dir="${lib}" includes="h2.jar"/>
        </path>
        <property name="flyway.locations" value="filesystem:./etc/migrations"/>

        <flyway:migrate url="${dbUrl}?useSSL=false&amp;serverTimezone=UTC" user="${dbUserName}" password="${dbPassword}"/>
    </target>

    <!-- Run -->
    <target name="debug" depends="compile_main, jar">
        <java classname="i5.las2peer.tools.L2pNodeLauncher"
              classpathref="libraries"
              failonerror="true"
              fork="true">
            <jvmarg value="-Xdebug"/>
            <jvmarg
                    value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5432"/>
            <arg value='-p'/>
            <arg value='9011'/>
            <arg value='uploadStartupDirectory'/>
            <arg value="startService('${service.name}.${service.class}@${service.version}','${service.passphrase}')"/>
            <arg value='startWebConnector'/>
            <arg value='interactive'/>
        </java>
    </target>

</project>
