/*
 * This file is generated by jOOQ.
 */
package de.rwth.dbis.acis.bazaar.service.dal.jooq.tables;


import de.rwth.dbis.acis.bazaar.service.dal.jooq.Keys;
import de.rwth.dbis.acis.bazaar.service.dal.jooq.Reqbaz;
import de.rwth.dbis.acis.bazaar.service.dal.jooq.tables.records.AttachmentRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.9.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Attachment extends TableImpl<AttachmentRecord> {

    private static final long serialVersionUID = -1603866374;

    /**
     * The reference instance of <code>reqbaz.attachment</code>
     */
    public static final Attachment ATTACHMENT = new Attachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttachmentRecord> getRecordType() {
        return AttachmentRecord.class;
    }

    /**
     * The column <code>reqbaz.attachment.id</code>.
     */
    public final TableField<AttachmentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reqbaz.attachment.creation_date</code>.
     */
    public final TableField<AttachmentRecord, Timestamp> CREATION_DATE = createField("creation_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>reqbaz.attachment.last_updated_date</code>.
     */
    public final TableField<AttachmentRecord, Timestamp> LAST_UPDATED_DATE = createField("last_updated_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>reqbaz.attachment.requirement_id</code>.
     */
    public final TableField<AttachmentRecord, Integer> REQUIREMENT_ID = createField("requirement_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reqbaz.attachment.user_id</code>.
     */
    public final TableField<AttachmentRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reqbaz.attachment.name</code>.
     */
    public final TableField<AttachmentRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>reqbaz.attachment.description</code>.
     */
    public final TableField<AttachmentRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>reqbaz.attachment.mime_type</code>.
     */
    public final TableField<AttachmentRecord, String> MIME_TYPE = createField("mime_type", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>reqbaz.attachment.identifier</code>.
     */
    public final TableField<AttachmentRecord, String> IDENTIFIER = createField("identifier", org.jooq.impl.SQLDataType.VARCHAR.length(900).nullable(false), this, "");

    /**
     * The column <code>reqbaz.attachment.file_url</code>.
     */
    public final TableField<AttachmentRecord, String> FILE_URL = createField("file_url", org.jooq.impl.SQLDataType.VARCHAR.length(1000).nullable(false), this, "");

    /**
     * Create a <code>reqbaz.attachment</code> table reference
     */
    public Attachment() {
        this("attachment", null);
    }

    /**
     * Create an aliased <code>reqbaz.attachment</code> table reference
     */
    public Attachment(String alias) {
        this(alias, ATTACHMENT);
    }

    private Attachment(String alias, Table<AttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attachment(String alias, Table<AttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Reqbaz.REQBAZ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AttachmentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ATTACHMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AttachmentRecord> getPrimaryKey() {
        return Keys.KEY_ATTACHMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AttachmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AttachmentRecord>>asList(Keys.KEY_ATTACHMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AttachmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AttachmentRecord, ?>>asList(Keys.ATTACHMENT_REQUIREMENT, Keys.ATTACHMENT_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Attachment as(String alias) {
        return new Attachment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(String name) {
        return new Attachment(name, null);
    }
}
